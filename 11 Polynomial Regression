#apply polynomial regression in pipeline
pipe_poly=Pipeline([ 
    ('polynomialfeatures', PolynomialFeatures()),
    ('scaler',MinMaxScaler()),
    ('norm_reg', LinearRegression())  
])

# grid search till degree 5
param_poly = {'polynomialfeatures__degree':range(1,5)}
best_polR = GridSearchCV(pipe_poly, param_poly,cv=5, n_jobs=-1, return_train_score = True)
best_polR.fit(x_train, y_train)
all_models['Model'].append('Polynomial Regression')
all_models['Cross Validation Score'].append(best_polR.best_score_)

# model predictions
y_train_pred = best_polR.predict(x_train)
y_test_pred = best_polR.predict(x_test)

# check model performance:
print('Train:')
print('MSE: {}'.format(mean_squared_error(y_train, y_train_pred)))
print('RMSE: {}'.format(sqrt(mean_squared_error(y_train, y_train_pred))))
print('R2: {}'.format(r2_score(y_train, y_train_pred)))
print('Test')
print('MSE: {}'.format(mean_squared_error(y_test, y_test_pred)))
print('RMSE: {}'.format(sqrt(mean_squared_error(y_test, y_test_pred))))
print('R2: {}'.format(r2_score(y_test, y_test_pred)))
# find best parameters
print('Best parameters: ')
print(best_polR.best_params_)
# cross validation
print("Cross Validation training results", best_polR.cv_results_['mean_train_score'])
print("Cross Validation testing results", best_polR.cv_results_['mean_test_score'])
